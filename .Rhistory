walk[i]=ifelse( sum(walklist[[walk[(i-1)]]] %in% walk[1:(i-1)])==length(walklist[[walk[(i-1)]]]),0,
ifelse( sum(!(walklist[[walk[(i-1)]]] %in% walk[1:(i-1)]))==1,
walklist[[walk[(i-1)]]][ !(walklist[[walk[(i-1)]]] %in% walk[1:(i-1)])],
sample(walklist[[walk[(i-1)]]][!(walklist[[walk[(i-1)]]] %in% walk[1:(i-1)])],1)  ))
if(walk[i]==0) return(walk)}
return(walk)}
bogglewalk()
bogglewalk()
bogglewalk()
bogglewalk()
bogglewalk()
bogglewalk()
library(supply)
?bogglewalk
library(supply)
?bogglewalk
walks=replicate(100, bogglewalks())
walks=replicate(100, bogglewalk())
walks
walks[sum(walks==0)==0] # only the complete permutations
walks[apply(walks,1,function(x){sum(x==0)==0})] # only the complete permutations
walks=t(replicate(100, bogglewalk()))
walks
walks[apply(walks,1,function(x){sum(x==0)==0})] # only the complete permutations
library(supply)
sum(1:16)
walks[apply(walks,1,function(x){sum(x)==136}),] # keep only the complete permutations
walks=t(replicate(100, bogglewalk()))
walks[apply(walks,1,function(x){sum(x)==136}),] # keep only the complete permutations
library(supply)
library(supply)
?perm
library(supply)
library(supply)
library(supply)
?sectionbreak
library(supply)
desktop()
ls()
library(supply)
desktop()
library(supply)
ls()
desktop()
?desktop
supply::dt
library(supply)
desktop()
library(supply)
dt()
desktop()
library(supply)
?dt
?desktop
??desktop
library(supply)
?desktop
library(supply)
library(supply)
desktop()
list.files()
groupcenter(dfr$dv,group=dfr$subject)
library(supply)
?groupcenter
dfr=data.frame(subject=c(1,1,1,2,2,2,3,3,3),dv=c(2,4,1, 6,1,2, 4,3,3))
groupcenter(dfr$dv,group=dfr$subject)
library(supply)
library(supply)
data(bogglewords)
library(supply)
data(supply)
?data
data(package="supply")
library(supply)
data(package="supply")
library(supply)
data(package="supply")
data()
library(supply)
library(supply)
pch()
library(supply)
library(supply)
library(supply)
library(supply)
library(supply)
data(writingsystems)
ls()
str(writingsystems.list)
library(supply)
library(supply)
library(supply)
data(lexical)
str(lexical)
library(supply)
ls()
help("lexical")
library(supply)
data(supply)
data(package="supply")
data(boggles)
ls()
str(boggles)
ls()
library(supply)
library(supply)
library(supply)
library(supply)
library(supply)
ls()
ls()
library(supply)
ls()
help(boggles)
ls9)
ls()
ls()
?scrabble
scrabble()
scrabble
table(factor(unlist(strsplit("qvreet0drinkendjpandjeooleepzoongymtnablafkernnaazoendcntshowthesse0anbengkstremeegameuiuleefrexwuisicdv",
split = "")), levels = c(letters[], "0")))
wordfeud=list(dutch=table(factor(unlist(strsplit("qvreet0drinkendjpandjeooleepzoongymtnablafkernnaazoendcntshowthesse0anbengkstremeegameuiuleefrexwuisicdv",split = "")), levels = c(letters[], "0")))
)
wordfeud
save(wordfeud,file="/Users/ling-jwe/supply/data/wordfeud.RData")
tiles=read.table("/Users/ling-jwe/Desktop/English.txt",stringsAsFactors=F)
tiles
tiles=as.table(read.table("/Users/ling-jwe/Desktop/English.txt",stringsAsFactors=F))
wordfeud
class(wordfeud[[1]])
tiles
tiles=tiles[rep(1:nrow(tiles),tiles$V2),]
nrow(tiles)
sum(wordfeud$dutch)
tiles=read.table("/Users/ling-jwe/Desktop/English.txt",stringsAsFactors=F)
tiles=tiles[rep(1:nrow(tiles),tiles$V2),]
nrow(tiles)
table(tiles$V1)
wordfeud$english=table(tiles$V1)
wordfeud
save(wordfeud,file="/Users/ling-jwe/supply/data/wordfeud.RData")
tiles=read.table("/Users/ling-jwe/Desktop/English.txt",stringsAsFactors=F)
tiles
tiles=tiles[rep(1:nrow(tiles),tiles$V2),]
tiles
table(tiles$V1)
sum(table(tiles$V1))
tiles=read.table("/Users/ling-jwe/Desktop/English.txt",stringsAsFactors=F)
sum(table(tiles$V1))
table(tiles$V1)
tiles=tiles[rep(1:nrow(tiles),tiles$V2),]
table(tiles$V1)
sum(table(tiles$V1))
tiles=read.table("/Users/ling-jwe/Desktop/English.txt",stringsAsFactors=F)
tiles=tiles[rep(1:nrow(tiles),tiles$V2),]
table(tiles$V1)
sum(table(tiles$V1))
wordfeud$swedish=table(tiles$V1)
save(wordfeud,file="/Users/ling-jwe/supply/data/wordfeud.RData")
wordfeud
do.call(cbind,wordfeud)
library(supply)
roman("Καλημέρα","greek")
roman("Здравствуйте!","cyrillic")
version()
library(supply)
library(supply)
?patch
library(supply)
dfr=data.frame(x=c(rep("A",8),rep("B",6),rep("A",2)))
casenumber(dfr$x)
groupcenter=function(x,group){
tapply(x,group,mean,na.rm=TRUE)[group]}
groupcenter(x=c(1,2,2,1,2,1,2,2,1)
)
# map1 = structure(read.table("/Users/ling-jwe/Documents/R/SUPPLY/specialcharacters.txt",header=F,sep="\t")[,1],
#    names=read.table("/Users/ling-jwe/Documents/R/SUPPLY/specialcharacters.txt",header=F,sep="\t")[,2])
encode=function(text,textencoding="map2"){  #
if(is.data.frame(text)){stop("Input needs to be a vector")}
alphabeth=c(charactermaps[[textencoding]],charactermaps[["ascii"]])
text.list=strsplit(text,split="")
do.call(rbind,lapply(text.list,function(x){paste(names(alphabeth[match(x,alphabeth)]),collapse="")}))
}
# How to keep two characters together?????
testobj=sapply(charactermaps[["map1"]],function(x){
gsub(x,names(x),outputstring)}
library(supply)
library(supply)
library(supply)
library(supply)
allempty=function(dfr){apply(is.na(dfr),1,sum)<ncol(dfr)}
source('~/.active-rstudio-document')
library(supply)
library(supply)
anno(1.4)
anno("1;89")
anno("1;11")
library(supply)
help(characterconstants)
transparentgreen
hemisphere
library(supply)
library(supply)
sprintf("%03.0f", 7)
sprintf("%3.3f", 7)
sprintf("%.3f", 7)
sprintf("%.3f", 7.0)
round(5.0,3=
round(5.0,3)
mod.lm=lm(rnorm(10)~1)
coef(summary(mod.lm))
sprintf("%.3f",coef(summary(mod.lm)))
# Save a regression table (lm or lmer) as double-tab separated text file.
tabtable=function(regressiontable,filename="regressiontable.txt"){
writeLines(
apply(cbind(rownames(coef(summary(regressiontable))),sprintf("%.3f",coef(summary(regressiontable)))),1,
function(x){paste(x,collapse="\t\t")}),
con=filename)
}
desktop()
tabtable(mod.lm)
sprintf("%.3f",coef(summary(mod.lm)))
paste(sprintf("%.3f",coef(summary(mod.lm))),collapse="\t")
# Save a regression table (lm or lmer) as double-tab separated text file.
tabtable=function(regressiontable,filename="regressiontable.txt"){
writeLines(
apply(cbind(rownames(coef(summary(regressiontable))),
paste(sprintf("%.3f",coef(summary(regressiontable)))),collapse="\t\t"),   1,
function(x){paste(x,collapse="\t\t")}),
con=filename)
}
tabtable(mod.lm)
tabtable
# Save a regression table (lm or lmer) as double-tab separated text file.
tabtable=function(regressiontable,filename="regressiontable.txt"){
writeLines(
apply(cbind(rownames(coef(summary(regressiontable))),
paste(sprintf("%.3f",coef(summary(regressiontable)))),collapse="\t\t"),   1,
function(x){paste(x,collapse="\t\t")}),
con=filename)
}
tabtable
tabtable
tabtable(mod.lm)
tabtable(mod.lm)
sprintf("%.3f",coef(summary(mod.lm)))
paste(sprintf("%.3f",coef(summary(mod.lm))),collapse="\t\t")
# Save a regression table (lm or lmer) as double-tab separated text file.
tabtable=function(regressiontable,filename="regressiontable.txt"){
writeLines(
# apply(cbind(rownames(coef(summary(regressiontable))),
#    paste(sprintf("%.3f",coef(summary(regressiontable)))),collapse="\t\t"),   1,
# function(x){paste(x,collapse="\t\t")}),
paste(sprintf("%.3f",coef(summary(regressiontable)))),collapse="\t\t")
con=filename)
}
# Save a regression table (lm or lmer) as double-tab separated text file.
tabtable=function(regressiontable,filename="regressiontable.txt"){
writeLines(
# apply(cbind(rownames(coef(summary(regressiontable))),
#    paste(sprintf("%.3f",coef(summary(regressiontable)))),collapse="\t\t"),   1,
# function(x){paste(x,collapse="\t\t")}),
paste(sprintf("%.3f",coef(summary(regressiontable))),collapse="\t\t")
con=filename)
}
# Save a regression table (lm or lmer) as double-tab separated text file.
tabtable=function(regressiontable,filename="regressiontable.txt"){
writeLines(
# apply(cbind(rownames(coef(summary(regressiontable))),
#    paste(sprintf("%.3f",coef(summary(regressiontable)))),collapse="\t\t"),   1,
# function(x){paste(x,collapse="\t\t")}),
paste(sprintf("%.3f",coef(summary(regressiontable))),collapse="\t\t"))
con=filename)
}
# Save a regression table (lm or lmer) as double-tab separated text file.
tabtable=function(regressiontable,filename="regressiontable.txt"){
writeLines(
# apply(cbind(rownames(coef(summary(regressiontable))),
#    paste(sprintf("%.3f",coef(summary(regressiontable)))),collapse="\t\t"),   1,
# function(x){paste(x,collapse="\t\t")}),
sprintf("%.3f",coef(summary(regressiontable))),
con=filename)
}
tabtable(mod.lm)
# Save a regression table (lm or lmer) as double-tab separated text file.
tabtable=function(regressiontable,filename="regressiontable.txt"){
writeLines(
# apply(cbind(rownames(coef(summary(regressiontable))),
#    paste(sprintf("%.3f",coef(summary(regressiontable)))),collapse="\t\t"),   1,
# function(x){paste(x,collapse="\t\t")}),
paste(sprintf("%.3f",coef(summary(regressiontable))),collapse="\t\t")
con=filename)
}
# Save a regression table (lm or lmer) as double-tab separated text file.
tabtable=function(regressiontable,filename="regressiontable.txt"){
writeLines(
# apply(cbind(rownames(coef(summary(regressiontable))),
#    paste(sprintf("%.3f",coef(summary(regressiontable)))),collapse="\t\t"),   1,
# function(x){paste(x,collapse="\t\t")}),
sprintf("%.3f",coef(summary(regressiontable)))
con=filename)
}
# Save a regression table (lm or lmer) as double-tab separated text file.
tabtable=function(regressiontable,filename="regressiontable.txt"){
writeLines(
# apply(cbind(rownames(coef(summary(regressiontable))),
#    paste(sprintf("%.3f",coef(summary(regressiontable)))),collapse="\t\t"),   1,
# function(x){paste(x,collapse="\t\t")}),
sprintf("%.3f",coef(summary(regressiontable))),
con=filename)
}
tabtable(mod.lm)
# Save a regression table (lm or lmer) as double-tab separated text file.
tabtable=function(regressiontable,filename="regressiontable.txt"){
writeLines(
# apply(cbind(rownames(coef(summary(regressiontable))),
#    paste(sprintf("%.3f",coef(summary(regressiontable)))),collapse="\t\t"),   1,
# function(x){paste(x,collapse="\t\t")}),
paste(sprintf("%.3f",coef(summary(regressiontable))),collapse="\t\t")         ,
con=filename)
}
tabtable(mod.lm)
str(mod.lm)
# Save a regression table (lm or lmer) as double-tab separated text file.
tabtable=function(regressiontable,filename="regressiontable.txt"){
writeLines(
# apply(cbind(rownames(coef(summary(regressiontable))),
#    paste(sprintf("%.3f",coef(summary(regressiontable)))),collapse="\t\t"),   1,
# function(x){paste(x,collapse="\t\t")}),
paste("xx",   paste(sprintf("%.3f",coef(summary(regressiontable))),collapse="\t\t") , collapse="\t\t")        ,
con=filename)
}
tabtable(mod.lm)
# Save a regression table (lm or lmer) as double-tab separated text file.
tabtable=function(regressiontable,filename="regressiontable.txt"){
writeLines(
# apply(cbind(rownames(coef(summary(regressiontable))),
#    paste(sprintf("%.3f",coef(summary(regressiontable)))),collapse="\t\t"),   1,
# function(x){paste(x,collapse="\t\t")}),
paste("xx",   paste(sprintf("%.3f",coef(summary(regressiontable))),collapse="\t\t") , sep="\t\t")        ,
con=filename)
}
tabtable(mod.lm)
# Save a regression table (lm or lmer) as double-tab separated text file.
tabtable=function(regressiontable,filename="regressiontable.txt"){
writeLines(
# apply(cbind(rownames(coef(summary(regressiontable))),
#    paste(sprintf("%.3f",coef(summary(regressiontable)))),collapse="\t\t"),   1,
# function(x){paste(x,collapse="\t\t")}),
paste(rownames(coef(summary(regressiontable))),paste(sprintf("%.3f",coef(summary(regressiontable))),collapse="\t\t"),sep="\t\t")        ,
con=filename)
}
tabtable(mod.lm)
# Save a regression table (lm or lmer) as double-tab separated text file.
tabtable=function(regressiontable,filename="regressiontable.txt"){
writeLines(
paste(rownames(coef(summary(regressiontable))),
paste(sprintf("%.3f",coef(summary(regressiontable))),collapse="\t\t"),
sep="\t\t"),
con=filename)
}
library(supply)
ls()
source('~/supply/R/tabtable.R')
dfr=data.frame(y=rnorm(10),x=rnorm(10))
mod.lm=lm(dfr$y~dfr$x)
mod.lm
tabtable(mod.lm)
paste(rownames(coef(summary(mod.lm))),
paste(sprintf("%.3f",coef(summary(mod.lm))),collapse="\t\t"),
sep="\t\t")
paste(rownames(coef(summary(mod.lm))),
paste(sprintf("%.3f",coef(summary(mod.lm))),collapse="\t\t"),
collapse="\t\t")
coef=coef(summary(mod.lm))
coef
sprintf("%.3f",coef)
round(coef,3)
apply(coef,1,function(x){sprintf("%.3f",x)})
apply(coef,1,function(x){paste(sprintf("%.3f",x),collapse="\t\t")})
writeLines(apply(coef,1,function(x){sprintf("%.3f",x)}),con="regressiontable.txt")
coef
apply(coef(summary(mod.lm)),1,
paste(
rownames(coef(summary(mod.lm))),
paste(sprintf("%.3f",coef(summary(mod.lm))),collapse="\t\t"),
collapse="\t\t"))
?sprintf
apply(coef,1,function(x){paste(sprintf("%.3f",x),collapse="\t\t")})
paste(
rownames(coef(summary(mod.lm))),
apply(coef,1,function(x){paste(sprintf("%.3f",x),collapse="\t\t")}),
collapse="\t\t")
paste(
rownames(coef(summary(mod.lm))),
apply(coef,1,function(x){paste(sprintf("%.3f",x),collapse="\t\t")}),
sep="\t\t")
tabtable=function(regressiontable,filename="regressiontable.txt"){
writeLines(
paste(
rownames(coef(summary(regressiontable))),
apply(coef(summary(regressiontable)),1,function(x){paste(sprintf("%.3f",x),collapse="\t\t")}),
sep="\t\t"),
# paste(rownames(coef(summary(regressiontable))),
#    paste(sprintf("%.3f",coef(summary(regressiontable))),collapse="\t\t"),
#    sep="\t\t"),
con=filename)
}
tabtable(mod.lm)
library(supply)
big(1.5345e6)
library(supply)
big(1.3544e6)
big(1.3544e6,3)
big(1.5345e6,2)
big(1.5345e6)
big(1.5345e6,2)
big(1.5345e6)
Sys.getenv()
Sys.getenv("HOME")
desktop=function(){setwd(paste(Sys.getenv("HOME"),"Desktop",sep="/"))}
desktop()
getwd()
library(supply)
library(supply)
chinesegender=structure(c("M","F"),names=c("男","女"))
chinesegender
library(supply)
chinesegender
load(writingsystems)
load("writingsystems.RData")
data(writingsystems)
writingsystems
pin=read.table("/Users/ling-jwe/Documents/STUDIES/CHIN/pinyin.txt")
pin
writingsystems
writingsystems[["chinese"]]=structure(pin[,1],names=pin[,2])
writingsystems
save(writingsytems)
save(writingsystems)
save(writingsystems,file="/Users/ling-jwe/Documents/R/PACKAGES/supply/data/writingsystems.RData")
library(supply)
writingsystems
devtools::load_all(".")
library(supply)
ls()
desktop()
getwed()
getwd()
(x=structure(1:3,names=letters[1:3]))
library(supply)
library(supply)
brainregion
restructure(brainregion)
restructure(restructure(brainregion))
hz=c(1000,2000,1000,4000)
semitones(hz)
semitones(hz,ref=500)
library(supply)
hz=c(1000,2000,1000,4000)
semitones(hz)
semitones(hz,ref=500)
semitones
semitones=function(x,ref){12*(log(x/   ifelse(is.na(ref),min(x,na.rm=T),ref)   )/log(2))}
hz=c(1000,2000,1000,4000)
semitones(hz)
semitones(hz,ref=500)
semitones=function(x,ref=min(x,na.rm=T)){12*(log(x/   ref   )/log(2))}
hz=c(1000,2000,1000,4000)
semitones(hz)
semitones(hz,ref=500)
hz=c(1000,2000,1000,4000)
semitones(hz)
semitones(hz,ref=250)
hz=c(1000,2000,1000,4000)
semitones(hz)
semitones(hz,ref=4000)
semitones=function(x,ref=min(x,na.rm=T)){12*(log(x/ref)/log(2))}
library(supply)
library(supply)
library(supply)
?tabble
x=matrix(c(1,1,2,2),ncol=2)
tabble(x)
x=matrix(c(1,1,2,2),ncol=2)
tabble(x,5)
x=matrix(c(1,1,2,2),ncol=2)
tabble(x,decimals=4)
x=matrix(c(1,1,2,2),ncol=2)
tabble(x,decimals=10)
x=matrix(c(1,1,2,2),ncol=2)
tabble(x,decimals=10)
x=matrix(c(1,1,2,2),ncol=2)
tabble(x,decimals=10)
x=matrix(c(1,1,2,2),ncol=2)
tabble(x,decimals=10)
x=matrix(c(1,1,2,2),ncol=2)
tabble(x,decimals=10)
x=matrix(c(1,1,2,2),ncol=2)
tabble(x,decimals=1)
library(supply)
library(supply)
table(c(0,0,0,0,0,2,2,2,2,2),c(0,0,0,2,2,2,2,2,2)
)
table(c(0,0,0,0,2,2,2,2,2),c(0,0,0,2,2,2,2,2,2)
)
table(c(0,0,0,0,2,2,2,2,2),c(0,0,0,2,2,2,2,2,2))
tabble(table(c(0,0,0,0,2,2,2,2,2),c(0,0,0,2,2,2,2,2,2)))
tabble(table(c(0,0,0,0,2,2,2,2,2),c(0,0,0,2,2,2,2,2,2)),decimals=0)
library(supply)
library(supply)
